<?php

namespace AppBundle\Repository;

use Doctrine\ORM\Configuration;
use Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    /**
     * @param $keyword
     *
     * @return array
     */
    public function findUserByKeyword($keyword) : array
    {
        $qb = $this->createQueryBuilder('u')
                ->where('REGEXP(u.username, :regexp) = true')
                ->setParameter('regexp', $keyword)
                ->leftJoin('u.skill', 'skl')
                ->addSelect('skl');

        return $qb->getQuery()->getArrayResult();
    }

    public function findUserByDistance($keyword, $lat, $lng, $requestedDistance)
    {
        $em = $this->getEntityManager();
        $config = $em->getConfiguration();
        $config->addCustomNumericFunction('COS', 'DoctrineExtensions\Query\Mysql\Cos');
        $config->addCustomNumericFunction('ACOS', 'DoctrineExtensions\Query\Mysql\Acos');
        $config->addCustomNumericFunction('RADIANS', 'DoctrineExtensions\Query\Mysql\Radians');
        $config->addCustomNumericFunction('SIN', 'DoctrineExtensions\Query\Mysql\Sin');

        $qb = $this->createQueryBuilder('u')
                ->where('REGEXP(u.username, :regexp) = true')
                ->setParameter('regexp', $keyword)
                ->leftJoin('u.skill', 'skl')
                ->addSelect('skl')
                ->addSelect('(6371 * acos(cos(radians(' . $lat . ')) * cos(radians(u.lat)) * cos(radians(u.lng) - radians(' . $lng . ')) + sin(radians(' . $lat . ')) * sin(radians(u.lat)))) AS distance')
                ->having('distance <= :radius')
                ->setParameter('radius', $requestedDistance)
                ->orderBy('distance', 'ASC');

        return $qb->getQuery()->getResult();
    }

    /*public function getAll($user,$param){
        $qb = $this
                ->createQueryBuilder('u')
                ->select('u.username , u.gender')
                ->addSelect('(6371 * acos(cos(radians(' . $user->getLat() . ')) * cos(radians(u.lat)) * cos(radians(u.lng) - radians(' . $user->getLon() . ')) + sin(radians(' . $user->getLat() . ')) * sin(radians(u.lat)))) AS distance')
                ->having('distance <= :radius')
                ->setParameter('radius', $param['distance'])
                ->leftJoin('u.categories', 'c')
                ->addSelect('c')
                ->orderBy('distance', 'DESC')
                ->setFirstResult(100 - $param['page']*100)
                ->setMaxResults(100);
        return $qb->getQuery()->getResult();
    }*/
}
